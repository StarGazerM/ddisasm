.type register <: symbol
.type address <: unsigned
.type operand_code <: unsigned
.type operand_index <: unsigned
    .init arch = ARM64
    .init arch = X86_32
    .init arch = X86_64
.init function_inference = basic_function_inference
.init address_in_data_refined_range=empty_range
.init address_array_range=empty_range
.comp basic_function_inference {
.decl function_entry(Block:address)
.input function_entry
.decl in_function(Block:address,Function:address)
.input in_function
.decl function_without_callframe(Block:address)
.input function_without_callframe
.decl in_function_initial(Block:address,Function:address)
.input in_function_initial
.decl not_in_function_initial(Block:address)
.input not_in_function_initial
}
.comp empty_range {
.decl in_ea(ea:address)
.input in_ea
}
.comp X86_64 : X86 {
}
.comp X86 {
.decl move_operation(Operation:symbol)
.input move_operation
.decl conditional_mov(EA:address)
.input conditional_mov
.decl mov(EA:address)
.input mov
.decl is_nop(EA:address)
.input is_nop
.decl return(n:address)
.input return
.decl delay_slot(BranchEA:address,EA:address)
.input delay_slot
.decl jump(EA:address)
.input jump
.decl op_does_not_read_dest_reg(Operation:symbol)
.input op_does_not_read_dest_reg
.decl arithmetic_operation(Operation:symbol)
.input arithmetic_operation
.decl multiplication_operation(Operation:symbol)
.input multiplication_operation
.decl logic_operation(Operation:symbol)
.input logic_operation
.decl read_only_operation(Operation:symbol)
.input read_only_operation
.decl write_only_operation(Operation:symbol)
.input write_only_operation
.decl one_op_write(Operation:symbol)
.input one_op_write
.decl loop_operation(operation:symbol)
.input loop_operation
.decl loop_prefix(prefix:symbol)
.input loop_prefix
.decl call_operation(operation:symbol)
.input call_operation
.decl syscall_operation(operation:symbol)
.input syscall_operation
.decl return_operation(operation:symbol)
.input return_operation
.decl halt_operation(operation:symbol)
.input halt_operation
.decl cmp_operation(Operation:symbol)
.input cmp_operation
.decl operation_size_exception(EA:address,Op_index:operand_index,Size:unsigned)
.input operation_size_exception
.decl reg_reg_arithmetic_operation(EA:address,Reg_dest:register,Reg1:register,Reg2:register,Mult:number,Offset:number)
.input reg_reg_arithmetic_operation
}
.comp X86_32 : X86 {
}
.decl split_load(ea:address, nextea:address, dest:address, type:symbol)
.input split_load
.decl discarded_aligned_pointer(ea:address)
.input discarded_aligned_pointer
.decl discarded_aligned_pointer_to_text(ea:address)
.input discarded_aligned_pointer_to_text
.decl unaligned_pointer(ea:address)
.input unaligned_pointer
.decl immediate_symbol(ea:address,op_index:operand_index,dest:address)
.input immediate_symbol
.decl moved_data_label(EA:address,Size:unsigned,Dest:address,NewDest:address)
.input moved_data_label
.decl moved_label(EA:address,Index:operand_index,Val:address,New_val:address)
.input moved_label
.decl moved_label_class(EA:address,Index:operand_index,Reason:symbol)
.input moved_label_class
.decl moved_pc_relative_candidate(EA:address,Index:operand_index,Val:address,NewVal:address,Diff:unsigned)
.input moved_pc_relative_candidate
.decl moved_displacement_candidate(EA:address,Op_index:operand_index,Dest:address,NewDest:address,Priority:unsigned)
.input moved_displacement_candidate
.decl discarded_moved_displacement_candidate(EA:address,Op_index:operand_index,Dest:address,NewDest:address,Distance:unsigned)
.input discarded_moved_displacement_candidate
.decl mov_immediate_to_reg(EA:address,Reg:register,Imm_index:operand_index,Immediate:number)
.input mov_immediate_to_reg
.decl cmp_reg_to_reg(EA:address,Reg1:register,Reg2:register)
.input cmp_reg_to_reg
.decl moved_immediate_candidate(EA:address,Op_index:operand_index,Immediate:address,New_immmediate:address)
.input moved_immediate_candidate
.decl dest_enlarged_data_section(EA:address,Reg:register,NewDest:address,
            Beg:address,End:address,OldBeg:address,OldEnd:address)
.input dest_enlarged_data_section
.decl cfg_edge(src:address,dest:address,conditional:symbol,indirect:symbol,type:symbol)
.input cfg_edge
.decl cfg_edge_to_top(src:address,conditional:symbol,type:symbol)
.input cfg_edge_to_top
.decl cfg_edge_to_symbol(src:address,symbol:symbol)
.input cfg_edge_to_symbol
.decl jump_table(Src:address,Data:address)
.input jump_table
.decl resolved_jump(Src:address,Dest:address)
.input resolved_jump
.decl instruction_memory_access_size(EA:address,Op_index:operand_index,Size:unsigned)
.input instruction_memory_access_size
.decl data_access(EA:address,Op_index:operand_index,RegSegment:register,RegBase:register,RegIndex:register,Mult:number,Offset:number,Size:unsigned)
.input data_access
.decl value_reg_at_operand(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)
.input value_reg_at_operand
.decl value_reg_at_operand_loop(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)
.input value_reg_at_operand_loop
.decl data_access_pattern(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.input data_access_pattern
.decl data_access_pattern_candidate(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.input data_access_pattern_candidate
.decl preferred_data_access(ea:address,ea_data_access:address)
.input preferred_data_access
.decl possible_data_limit(EA:address)
.input possible_data_limit
.decl last_data_limit(EA:address,Where:address)
.input last_data_limit
.decl last_data_access(EA:address,Where:address)
.input last_data_access
.decl propagated_data_access(EA:address,Mult:number,EA_ref:address)
.input propagated_data_access
.decl data_access_pattern_non_zero(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.input data_access_pattern_non_zero
.decl elf_section_flag(Name:symbol,Position:unsigned)
.input elf_section_flag
.decl elf_section_type(Name:symbol,Code:unsigned)
.input elf_section_type
.decl plt_section(name:symbol)
.input plt_section
.decl got_section(name:symbol)
.input got_section
.decl plt_entry(ea:address, function:symbol)
.input plt_entry
.decl plt_data_reference(ea:address)
.input plt_data_reference
.decl start_function(ea:address)
.input start_function
.decl tls_segment(Start:address,End:address,Align:unsigned)
.input tls_segment
.decl ifunc_symbol(EA:address,Name:symbol)
.input ifunc_symbol
.decl entry_point(ea:address)
.input entry_point
.decl endianness(End:symbol) // Either LE or BE
.input endianness
.decl base_address(ea:address)
.input base_address
.decl symbol(ea:address,size:unsigned,type:symbol,scope:symbol,sectionIndex:unsigned, originTable:symbol,tableIndex:unsigned,name:symbol)
.input symbol
.decl section_complete(name:symbol,size:unsigned,addr:address,type:unsigned,flags:unsigned,align:unsigned)
.input section_complete
.decl relocation(ea:address,type:symbol,name:symbol,addend:number)
.input relocation
.decl binary_type(Type:symbol)
.input binary_type
.decl binary_format(Format:symbol)
.input binary_format
.decl binary_isa(isa:symbol)
.input binary_isa
.decl option(Option:symbol)
.input option
.decl dynamic_entry(tag:symbol, value:unsigned)
.input dynamic_entry
.decl instruction(ea:address, size:unsigned, prefix:symbol, opcode:symbol,
          op1:operand_code, op2:operand_code, op3:operand_code, op4:operand_code,
          immOffset:unsigned,displacementOffset:unsigned)
.input instruction
.decl invalid_op_code(ea:address)
.input invalid_op_code
.decl op_regdirect(code:operand_code,register_name:register)
.input op_regdirect
.decl op_immediate(code:operand_code,offset:number)
.input op_immediate
.decl op_prefetch(code:operand_code, prefetch_type:symbol)
.input op_prefetch
.decl op_barrier(code:operand_code, prefetch_type:symbol)
.input op_barrier
.decl op_indirect(code:operand_code,reg1:register, reg2:register, reg3:register,
        multiplier:number, offset:number, size_value:unsigned)
.input op_indirect
.decl data_byte(ea:address,value:unsigned)
.input data_byte
.decl address_in_data(ea:address,value:address)
.input address_in_data
.decl instruction_immediate_offset(EA:address,Index:operand_index,Offset:unsigned)
.input instruction_immediate_offset
.decl instruction_displacement_offset(EA:address,Index:operand_index,Offset:unsigned)
.input instruction_displacement_offset
.decl instruction_get_op(ea:address, index:operand_index, operator:operand_code)
.input instruction_get_op
.decl instruction_get_dest_op(ea:address,index:number,op:operand_code)
.input instruction_get_dest_op
.decl instruction_get_src_op(ea:address,Index:operand_index,op:operand_code)
.input instruction_get_src_op
.decl next(n:address,m:address)
.input next
.decl pc_relative_operand(src:address,index:operand_index, dest:address)
.input pc_relative_operand
.decl got_relative_operand(EA:address,Index:operand_index,Dest:address)
.input got_relative_operand
.decl symbolic_operand_attribute(ea:address,index:unsigned,attribute:symbol)
.input symbolic_operand_attribute
.decl instruction_has_loop_prefix(EA:address)
.input instruction_has_loop_prefix
.decl unconditional_jump(n:address)
.input unconditional_jump
.decl conditional_jump(src:address)
.input conditional_jump
.decl direct_jump(src:address, dest:address)
.input direct_jump
.decl pc_relative_jump(src:address, dest:address)
.input pc_relative_jump
 .decl reg_jump(src:address,Reg:symbol)
.input reg_jump
 .decl indirect_jump(src:address)
.input indirect_jump
.decl direct_call(src:address, dest:address)
.input direct_call
.decl pc_relative_call(src:address,dest:address)
.input pc_relative_call
.decl reg_call(src:address,reg:register)
.input reg_call
 .decl indirect_call(src:address)
.input indirect_call
.decl return(n:address)
.input return
.decl halt(EA:address)
.input halt
.decl op_indirect_contains_reg(op:operand_code,reg:register)
.input op_indirect_contains_reg
.decl op_regdirect_contains_reg(op:operand_code,reg:register)
.input op_regdirect_contains_reg
.decl op_immediate_and_reg(EA:address,Operation:symbol,Reg:register,Imm_index:operand_index,Immediate:number)
.input op_immediate_and_reg
.decl cmp_immediate_to_reg(EA:address,Reg:register,Imm_index:operand_index,Immediate:number)
.input cmp_immediate_to_reg
.decl symbol_set(ea:address,size:unsigned,type:symbol,scope:symbol,sectionIndex:unsigned,name:symbol)
.input symbol_set
.decl ambiguous_symbol(name:symbol)
.input ambiguous_symbol
.decl function_symbol(ea:address,name:symbol)
.input function_symbol
.decl defined_symbol(ea:address,size:unsigned,type:symbol,scope:symbol,sectionIndex:unsigned,originTable:symbol,tableIndex:unsigned,name:symbol)
.input defined_symbol
.decl boundary_label(EA:address,Dest:address,Block:address)
.input boundary_label
.decl section(name:symbol,size:unsigned,addr:address)
.input section
.decl data_section(name:symbol)
.input data_section
.decl exception_section(name:symbol)
.input exception_section
.decl special_data_section(name:symbol)
.input special_data_section
.decl regular_data_section(name:symbol)
.input regular_data_section
.decl code_section(name:symbol)
.input code_section
.decl tls_section(name:symbol)
.input tls_section
.decl bss_section(name:symbol)
.input bss_section
.decl non_zero_data_section(name:symbol)
.input non_zero_data_section
.decl bss_section_limits(Begin:address,End:address)
.input bss_section_limits
.decl initialized_data_segment(Begin:address,End:address)
.input initialized_data_segment
.decl data_segment(Begin:address,End:address)
.input data_segment
.decl plt_block(block:address,function:symbol)
.input plt_block
.decl got_reference(Got_entry:address,Symbol:symbol)
.input got_reference
.decl got_local_reference(Got_entry:address,Dest:address)
.input got_local_reference
.decl main_function(ea:address)
.input main_function
.decl inferred_symbol_name(ea:address,name:symbol,scope:symbol, type: symbol)
.input inferred_symbol_name
.decl no_return_call(EA:address)
.input no_return_call
.decl function_pointer_section(Name:symbol)
.input function_pointer_section
.decl no_return_function(Name:symbol)
.input no_return_function
.decl is_padding(EA:address)
.input is_padding
.decl abi_intrinsic(EA:address,Name:symbol)
.input abi_intrinsic
.decl false_negative(EA:address)
.input false_negative
.decl false_positive(EA:address)
.input false_positive
.decl relocation_in_operand(EA:address,Index:operand_index,Rel:address,InsnOffset:unsigned)
.input relocation_in_operand
.decl trivial_relocation(EA:address)
.input trivial_relocation
.decl bad_symbol_constant(EA:address,cnt:number)
.input bad_symbol_constant
.decl zero_relocation(EA:address)
.input zero_relocation
.decl code_in_block(ea:address,block:address)
.input code_in_block
.decl block(block:address)
.input block
.decl code(ea:address)
.input code
.decl block_last_instruction(block:address,EA:address)
.input block_last_instruction
.decl block_boundaries(block:address,BegAddr:address,EndAddr:address)
.input block_boundaries
.decl overlapping_instruction(EA:address, EA2: address)
.input overlapping_instruction
.decl data_in_code(Begin:address,End:address)
.input data_in_code
.decl block_still_overlap(ea:address,ea2:address)
.input block_still_overlap
.decl may_fallthrough(o:address,d:address)
.input may_fallthrough
.decl must_fallthrough(o:address,d:address)
.input must_fallthrough
.decl may_have_symbolic_immediate(src:address,dest:address)
.input may_have_symbolic_immediate
.decl invalid(EA:address)
.input invalid
.decl possible_ea(EA:address)
.input possible_ea
.decl basic_target(ea:address)
.input basic_target
.decl block_limit(EA:address)
.input block_limit
.decl possible_target_from(dest:address,src:address)
.input possible_target_from
.decl possible_target(Target:address)
.input possible_target
.decl code_in_block_candidate(EA:address,EA_block:address)
.input code_in_block_candidate
.decl after_end(EA:address,End:address)
.input after_end
.decl common_tail(EA:address)
.input common_tail
.decl code_in_block_candidate_refined(EA:address,Block:address)
.input code_in_block_candidate_refined
.decl block_candidate_boundaries(BlockId:address,StartAddr:address,EndAddr:address)
.input block_candidate_boundaries
.decl multiple_fallthrough_to(Block:address)
.input multiple_fallthrough_to
.decl instruction_range(EA:address,EA_Instruction:address)
.input instruction_range
.decl block_overlap(ea:address,ea2:address)
.input block_overlap
.decl block_is_overlapping(block:address)
.input block_is_overlapping
.decl block_total_points(ea_block:address, points:number)
.input block_total_points
.decl discarded_block(ea_block:address)
.input discarded_block
.decl candidate_block_is_not_padding(Block:address)
.input candidate_block_is_not_padding
.decl candidate_block_is_padding(Block:address)
.input candidate_block_is_padding
.decl block_points(block:address,predecessor:address,importance:number,why:symbol)
.input block_points
.decl transitive_points(type:symbol)
.input transitive_points
.decl overlap_with_jump_table(block:address)
.input overlap_with_jump_table
.decl data_in_code_propagate(Current:address,Initial:address,SectionLimit:address)
.input data_in_code_propagate
.decl next_block_in_section(Block:address,NextBlock:address)
.input next_block_in_section
.decl cie_entry(addr: address, length:unsigned,codeAlignmentFactor:unsigned,DataAlignmentFactor:number)
.input cie_entry
.decl cie_encoding(addr: address, FdeEncoding:unsigned, LsdaEncoding:unsigned)
.input cie_encoding
.decl cie_personality(addr:address,Personality:address,PersonalityPos:address,PersonalitySize:unsigned,Encoding:unsigned)
.input cie_personality
.decl fde_entry(addr: address,length:unsigned,cie:address, start:address, end:address,lsda:address)
.input fde_entry
.decl fde_pointer_locations(addr:address,startLocation:address,endLocation:address,
                            endSize:unsigned,lsdaLocation:address,lsdaSize:unsigned)
.input fde_pointer_locations
.decl fde_instruction(addr:address,index:unsigned,size:unsigned,insn:symbol,op1:number,op2:number)
.input fde_instruction
.decl lsda(lsdaAddress:address,callsiteTable:address,callsiteTableEncoding:unsigned,callSiteTableLength:unsigned,
           typeTable:address, typeTableEncoding:unsigned, landingPadBaseAddress: address)
.input lsda
.decl lsda_pointer_locations(lsdaAddress:address,typeTablePointerLocation:address,callsiteTablePointerLoc:address)
.input lsda_pointer_locations
.decl lsda_callsite(CallSiteTable_address:address,EA_start:address, start:address,
    EA_end:address,end:address,
    EA_landingPad:address,landingPad:address,EA_endLandindPad:address)
.input lsda_callsite
.decl lsda_type_entry(lsdaTypeTableAddress:address, index:unsigned,address:address)
.input lsda_type_entry
.decl cfi_directive(BlockAddress:address,Offset:unsigned,LocalIndex:unsigned,
                    directive:symbol,Reference:address, Nargs:unsigned,arg1:number,arg2:number)
.input cfi_directive
.decl symbol_special_encoding(EA:address,encoding:symbol)
.input symbol_special_encoding
.decl fde_addresses(start:address, end:address)
.input fde_addresses
.decl fde_block_addresses(FdeAddr:address,StartAddr:address,EndAddr:address)
.input fde_block_addresses
.decl lsda_callsite_addresses(Start:address,End:address,LandingPad:address)
.input lsda_callsite_addresses
.decl special_encoding(Code:unsigned,Name:symbol)
.input special_encoding
.decl dwarf_encoding_size(Encoding:unsigned,Size:unsigned)
.input dwarf_encoding_size
.decl last_fde(Addr:address)
.input last_fde
.decl fde_instruction_pos(FdeAddr:address,Index:unsigned,InstructionAddr:address)
.input fde_instruction_pos
.decl last_fde_instruction(FdeAddr:address,Index:unsigned)
.input last_fde_instruction
.decl fde_instruction_ref(FdeAddr:address,Index:unsigned,LocalIndex:unsigned,ReferenceAddr:address)
.input fde_instruction_ref
.decl endproc_local_index(FdeAddr:address,LocalIndex:unsigned)
.input endproc_local_index
.decl cfi_operand_is_register(Insn:symbol,OpNumber:unsigned)
.input cfi_operand_is_register
.decl dwarf_to_cfi(DwarfInsn:symbol,OpNumber:unsigned,CfiInsn:symbol)
.input dwarf_to_cfi
.decl low_pass_mask(Mask:number)
.input low_pass_mask
.decl low_pass_filter(EA:address)
.input low_pass_filter
.decl is_xor_reset(EA:address)
.input is_xor_reset
.decl def(EA:address,Reg:register)
.input def
.decl used(EA:address,Reg:register,Index:operand_index)
.input used
.decl def_used(ea_def:address,reg:register,ea_used:address,index_used:operand_index)
.input def_used
.decl flow_def(EA:address,Reg:register,EA_next:address,Value:number)
.input flow_def
.decl local_next(ea:address,ea_next:address)
.input local_next
.decl inter_procedural_jump(Src:address,Dest:address)
.input inter_procedural_jump
.decl block_next(ea:address,ea_next:address)
.input block_next
.decl must_def(EA:address,Reg:register)
.input must_def
.decl defined_in_block(EA:address,Reg:register)
.input defined_in_block
.decl used_in_block(EA:address,Reg:register)
.input used_in_block
.decl block_last_def(EA:address,EA_def:address,Reg:register)
.input block_last_def
.decl last_def(EA:address,EA_def:address,Reg:register)
.input last_def
.decl def_used_for_address(EA_def:address,Reg:register)
.input def_used_for_address
.decl value_reg_edge(EA:address,Reg:register,
                EA_reg1:address,Reg1:register,Multiplier:number,Offset:number)
.input value_reg_edge
.decl value_reg(EA:address,Reg:register,
                EA_reg1:address,Reg1:register,Multiplier:number,Offset:number,steps:number)
.input value_reg
.decl best_value_reg(EA:address,Reg:register,EA_from:address,Multiplier:number,Offset:number,type:symbol)
.input best_value_reg
.decl reg_stored_in_stack(EA:address,Reg:register,StackPos:number, StackFrameDefinedAt: address)
.input reg_stored_in_stack
.decl reg_loaded_from_stack(EA:address,Reg:register,Base:register,StackPos:number, StackFrameDefinedAt: address)
.input reg_loaded_from_stack
.decl value_reg_unsupported(EA:address, Reg:register)
.input value_reg_unsupported
.decl step_limit(Limit:number)
.input step_limit
.decl printable_char(n:unsigned)
.input printable_char
.decl data_word(EA:address,Size:unsigned,Val:number)
.input data_word
.decl take_address(Src:address,Address_taken:address)
.input take_address
.decl relative_address(EA:address,Size:unsigned,TableStart:address,Reference:address,Dest:address,DestIsFirstOrSecond:symbol)
.input relative_address
.decl relative_address_start(EA:address,Size:unsigned,Reference:address,Dest:address, DestIsFirstOrSecond:symbol)
.input relative_address_start
.decl jump_table_element_access(EA:address,Size:unsigned,TableStart:address)
.input jump_table_element_access
.decl jump_table_start(EA_jump:address,Size:unsigned,TableStart:address,TableRef:address,Operation:symbol)
.input jump_table_start
.decl symbolic_operand(ea:address,index:operand_index,value:address,type:symbol)
.input symbolic_operand
.decl symbolic_data(ea:address,size:unsigned,value:address)
.input symbolic_data
.decl symbolic_expr_from_relocation(ea:address,size:unsigned,symbol:symbol,Addend:number)
.input symbolic_expr_from_relocation
.decl symbol_minus_symbol_jump_table(EA:address,TableStart:address,Size:unsigned,Symbol1:address,Symbol2:address,Reference:symbol,Scale:unsigned)
.input symbol_minus_symbol_jump_table
.decl symbol_minus_symbol(ea:address,size:unsigned,symbol1:address,symbol2:address,scale:unsigned)
.input symbol_minus_symbol
.decl code_pointer_in_data(EA:address,Val:address)
.input code_pointer_in_data
.decl labeled_data(ea:address)
.input labeled_data
.decl data_object_boundary(EA:address)
.input data_object_boundary
.decl bss_data(ea:address)
.input bss_data
.decl string_candidate(ea:address,end:address)
.input string_candidate
.decl string(ea:address,end:address)
.input string
.decl symbolic_operand_candidate(ea:address,operand_index:operand_index,Dest:address,Type:symbol)
.input symbolic_operand_candidate
.decl symbolic_operand_point(ea:address,operand_index:operand_index,points:number,why:symbol)
.input symbolic_operand_point
.decl symbolic_operand_total_points(ea:address,operand_index:operand_index,points:number)
.input symbolic_operand_total_points
.decl labeled_data_candidate(EA:address)
.input labeled_data_candidate
.decl address_in_data_refined(EA:address,Val:address)
.input address_in_data_refined
.decl string_part(ea:address,base:address)
.input string_part
.decl data_object_candidate(ea:address,size:unsigned,type:symbol)
.input data_object_candidate
.decl data_object_point(ea:address,size:unsigned,type:symbol,points:number,why:symbol)
.input data_object_point
.decl data_object_conflict(ea:address,size:unsigned,type:symbol,ea2:address,size2:unsigned,type2:symbol)
.input data_object_conflict
.decl discarded_data_object(ea:address,size:unsigned,type:symbol)
.input discarded_data_object
.decl data_object(ea:address,size:unsigned,type:symbol)
.input data_object
.decl after_address_in_data(EA:address,EA_next:address)
.input after_address_in_data
.decl next_address_in_data(EA:address,EA_next:address)
.input next_address_in_data
.decl address_array_aux(EA:address,Distance:unsigned,type:symbol,InitialEA:address)
.input address_array_aux
.decl address_array(EA:address,Distance:unsigned,InitialEA:address)
.input address_array
.decl data_object_total_points(EA:address,Size:unsigned,Type:symbol,Points:number)
.input data_object_total_points
.decl def_register_is_not_base_address(EA:address,Reg:register)
.input def_register_is_not_base_address
.decl code_in_refined_block(ea:address,block:address)
.input code_in_refined_block
.decl refined_block(block:address)
.input refined_block
.decl block_information(block:address,size:unsigned,endAddress:address)
.input block_information
.decl refined_block_last_instruction(block:address,EA:address)
// Last instruction (at runtime) of refined block:
.input refined_block_last_instruction
.decl refined_block_control_instruction(block:address,EA:address)
.input refined_block_control_instruction
.decl block_needs_splitting_at(EA:address)
.input block_needs_splitting_at
.decl code_in_split_block(ea:address,block:address)
.input code_in_split_block
.decl split_block(block:address)
.input split_block
.decl block_needs_merging(block:address)
.input block_needs_merging
.decl next_refined_block_in_section(Block:address, NextBlock:address)
.input next_refined_block_in_section
.decl padding(EA:address,Size:unsigned)
.input padding
.decl block_has_non_nop(Block:address)
.input block_has_non_nop
.decl nop_block(Block:address)
.input nop_block
.decl float_operation(operation:symbol)
.input float_operation
.decl jump_operation(n:symbol)
.input jump_operation
.decl unconditional_jump_operation(n:symbol)
.input unconditional_jump_operation
.decl jump_equal_operation(n:symbol)
.input jump_equal_operation
.decl jump_unequal_operation(n:symbol)
.input jump_unequal_operation
.decl jump_target_op(EA:address,operator:operand_code)
.input jump_target_op
.decl interrupt_operation(n:symbol)
.input interrupt_operation
.decl track_register(Reg32:register,Reg64:register)
.input track_register
.decl function_non_maintained_reg(reg:register)
.input function_non_maintained_reg
.decl pc_register(reg:register)
.input pc_register
.decl frame_pointer(reg:register)
.input frame_pointer
.decl stack_pointer(reg:register)
.input stack_pointer
.decl get_pc_thunk(EA:address,Reg:register)
.input get_pc_thunk
.decl got_reference_pointer(EA:address)
.input got_reference_pointer
.decl reg_has_got(EA:address,Reg:register)
.input reg_has_got
.decl track_register(Reg32:register,Reg64:register)
.input track_register
.decl function_non_maintained_reg(reg:register)
.input function_non_maintained_reg
.decl pc_register(reg:register)
.input pc_register
.decl frame_pointer(reg:register)
.input frame_pointer
.decl stack_pointer(reg:register)
.input stack_pointer
