.type register <: symbol
.type address <: unsigned
.type operand_code <: unsigned
.type operand_index <: unsigned
.init address_in_data_refined_range=empty_range
.init address_array_range=empty_range
    .init arch = ARM64
    .init arch = X64
.init function_inference = basic_function_inference
.comp  empty_range {
.decl in_ea(ea:address)
.input  in_ea
}
.comp  basic_function_inference {
.decl in_function_initial(Block:address,Function:address)
.input  in_function_initial
.decl not_in_function_initial(Block:address)
.input  not_in_function_initial
}
.comp  X64  {
.decl move_operation(Operation:symbol)
.input  move_operation
.decl conditional_mov(EA:address)
.input  conditional_mov
.decl mov(EA:address)
.input  mov
.decl is_nop(EA:address)
.input  is_nop
.decl return(n:address)
.input  return
.decl jump(EA:address)
.input  jump
.decl op_does_not_read_dest_reg(Operation:symbol)
.input  op_does_not_read_dest_reg
.decl arithmetic_operation(Operation:symbol)
.input  arithmetic_operation
.decl multiplication_operation(Operation:symbol)
.input  multiplication_operation
.decl logic_operation(Operation:symbol)
.input  logic_operation
.decl read_only_operation(Operation:symbol)
.input  read_only_operation
.decl write_only_operation(Operation:symbol)
.input  write_only_operation
.decl one_op_write(Operation:symbol)
.input  one_op_write
.decl loop_operation(operation:symbol)
.input  loop_operation
.decl loop_prefix(prefix:symbol)
.input  loop_prefix
.decl call_operation(operation:symbol)
.input  call_operation
.decl syscall_operation(operation:symbol)
.input  syscall_operation
.decl return_operation(operation:symbol)
.input  return_operation
.decl halt_operation(operation:symbol)
.input  halt_operation
.decl cmp_operation(Operation:symbol)
.input  cmp_operation
.decl operation_size_exception(EA:address,Op_index:operand_index,Size:unsigned)
.input  operation_size_exception
.decl reg_reg_arithmetic_operation(EA:address,Reg_dest:register,Reg1:register,Reg2:register,Mult:number,Offset:number)
.input  reg_reg_arithmetic_operation
}
.decl printable_char(n:unsigned)
.input  printable_char
.decl moved_pc_relative_candidate(EA:address,Index:operand_index,Val:address,NewVal:address,Diff:unsigned)
.input  moved_pc_relative_candidate
.decl discarded_moved_displacement_candidate(EA:address,Op_index:operand_index,Dest:address,NewDest:address,Distance:unsigned)
.input  discarded_moved_displacement_candidate
.decl cmp_reg_to_reg(EA:address,Reg1:register,Reg2:register)
.input  cmp_reg_to_reg
.decl moved_immediate_candidate(EA:address,Op_index:operand_index,Immediate:address,New_immmediate:address)
.input  moved_immediate_candidate
.decl def(EA:address,Reg:register)
.input  def
.decl used(EA:address,Reg:register,Index:operand_index)
.input  used
.decl flow_def(EA:address,Reg:register,EA_next:address,Value:number)
.input  flow_def
.decl local_next(ea:address,ea_next:address)
.input  local_next
.decl inter_procedural_jump(Src:address,Dest:address)
.input  inter_procedural_jump
.decl block_next(ea:address,ea_next:address)
.input  block_next
.decl must_def(EA:address,Reg:register)
.input  must_def
.decl defined_in_block(EA:address,Reg:register)
.input  defined_in_block
.decl used_in_block(EA:address,Reg:register)
.input  used_in_block
.decl block_last_def(EA:address,EA_def:address,Reg:register)
.input  block_last_def
.decl last_def(EA:address,EA_def:address,Reg:register)
.input  last_def
.decl def_used_for_address(EA_def:address,Reg:register)
.input  def_used_for_address
.decl take_address(Src:address,Address_taken:address)
.input  take_address
.decl relative_address_start(EA:address,Size:unsigned,Reference:address,Dest:address, DestIsFirstOrSecond:symbol)
.input  relative_address_start
.decl jump_table_element_access(EA:address,Size:unsigned,TableStart:address)
.input  jump_table_element_access
.decl jump_table(Src:address,Data:address)
.input  jump_table
.decl value_reg_unsupported(EA:address, Reg:register)
.input  value_reg_unsupported
.decl step_limit(Limit:number)
.input  step_limit
.decl code_pointer_in_data(EA:address,Val:address)
.input  code_pointer_in_data
.decl string_candidate(ea:address,end:address)
.input  string_candidate
.decl symbolic_operand_total_points(ea:address,operand_index:operand_index,points:number)
.input  symbolic_operand_total_points
.decl labeled_data_candidate(EA:address)
.input  labeled_data_candidate
.decl address_in_data_refined(EA:address,Val:address)
.input  address_in_data_refined
.decl string_part(ea:address,base:address)
.input  string_part
.decl data_object_candidate(ea:address,size:unsigned,type:symbol)
.input  data_object_candidate
.decl discarded_data_object(ea:address,size:unsigned,type:symbol)
.input  discarded_data_object
.decl data_object(ea:address,size:unsigned,type:symbol)
.input  data_object
.decl after_address_in_data(EA:address,EA_next:address)
.input  after_address_in_data
.decl next_address_in_data(EA:address,EA_next:address)
.input  next_address_in_data
.decl address_array_aux(EA:address,Distance:unsigned,type:symbol,InitialEA:address)
.input  address_array_aux
.decl address_array(EA:address,Distance:unsigned,InitialEA:address)
.input  address_array
.decl data_in_code(Begin:address,End:address)
.input  data_in_code
.decl may_fallthrough(o:address,d:address)
.input  may_fallthrough
.decl must_fallthrough(o:address,d:address)
.input  must_fallthrough
.decl may_have_symbolic_immediate(src:address,dest:address)
.input  may_have_symbolic_immediate
.decl invalid(EA:address)
.input  invalid
.decl possible_ea(EA:address)
.input  possible_ea
.decl basic_target(ea:address)
.input  basic_target
.decl block_limit(EA:address)
.input  block_limit
.decl possible_target_from(dest:address,src:address)
.input  possible_target_from
.decl after_end(EA:address,End:address)
.input  after_end
.decl common_tail(EA:address)
.input  common_tail
.decl multiple_fallthrough_to(Block:address)
.input  multiple_fallthrough_to
.decl instruction_range(EA:address,EA_Instruction:address)
.input  instruction_range
.decl block_is_overlapping(block:address)
.input  block_is_overlapping
.decl block_total_points(ea_block:address, points:number)
.input  block_total_points
.decl candidate_block_is_not_padding(Block:address)
.input  candidate_block_is_not_padding
.decl transitive_points(type:symbol)
.input  transitive_points
.decl overlap_with_jump_table(block:address)
.input  overlap_with_jump_table
.decl data_in_code_propagate(Current:address,Initial:address,SectionLimit:address)
.input  data_in_code_propagate
.decl next_block_in_section(Block:address,NextBlock:address)
.input  next_block_in_section
.decl low_pass_mask(Mask:number)
.input  low_pass_mask
.decl low_pass_filter(EA:address)
.input  low_pass_filter
.decl is_xor_reset(EA:address)
.input  is_xor_reset
.decl fde_addresses(start:address, end:address)
.input  fde_addresses
.decl fde_block_addresses(FdeAddr:address,StartAddr:address,EndAddr:address)
.input  fde_block_addresses
.decl lsda_callsite_addresses(Start:address,End:address,LandingPad:address)
.input  lsda_callsite_addresses
.decl special_encoding(Code:unsigned,Name:symbol)
.input  special_encoding
.decl dwarf_encoding_size(Encoding:unsigned,Size:unsigned)
.input  dwarf_encoding_size
.decl last_fde(Addr:address)
.input  last_fde
.decl fde_instruction_pos(FdeAddr:address,Index:unsigned,InstructionAddr:address)
.input  fde_instruction_pos
.decl last_fde_instruction(FdeAddr:address,Index:unsigned)
.input  last_fde_instruction
.decl fde_instruction_ref(FdeAddr:address,Index:unsigned,LocalIndex:unsigned,ReferenceAddr:address)
.input  fde_instruction_ref
.decl endproc_local_index(FdeAddr:address,LocalIndex:unsigned)
.input  endproc_local_index
.decl cfi_operand_is_register(Insn:symbol,OpNumber:unsigned)
.input  cfi_operand_is_register
.decl dwarf_to_cfi(DwarfInsn:symbol,OpNumber:unsigned,CfiInsn:symbol)
.input  dwarf_to_cfi
.decl address_in_data(ea:address,value:address)
.input  address_in_data
.decl instruction_get_op(ea:address, index:operand_index, operator:operand_code)
.input  instruction_get_op
.decl instruction_get_dest_op(ea:address,index:number,op:operand_code)
.input  instruction_get_dest_op
.decl instruction_get_src_op(ea:address,Index:operand_index,op:operand_code)
.input  instruction_get_src_op
.decl next(n:address,m:address)
.input  next
.decl instruction_has_loop_prefix(EA:address)
.input  instruction_has_loop_prefix
.decl unconditional_jump(n:address)
.input  unconditional_jump
.decl conditional_jump(src:address)
.input  conditional_jump
 .decl reg_jump(src:address,Reg:symbol)
.input  reg_jump
 .decl indirect_jump(src:address)
.input  indirect_jump
 .decl indirect_call(src:address)
.input  indirect_call
.decl return(n:address)
.input  return
.decl halt(EA:address)
.input  halt
.decl op_indirect_contains_reg(op:operand_code,reg:register)
.input  op_indirect_contains_reg
.decl op_regdirect_contains_reg(op:operand_code,reg:register)
.input  op_regdirect_contains_reg
.decl op_immediate_and_reg(EA:address,Operation:symbol,Reg:register,Imm_index:operand_index,Immediate:number)
.input  op_immediate_and_reg
.decl cmp_immediate_to_reg(EA:address,Reg:register,Imm_index:operand_index,Immediate:number)
.input  cmp_immediate_to_reg
.decl defined_symbol(ea:address,size:unsigned,type:symbol,scope:symbol,sectionIndex:unsigned,name:symbol)
.input  defined_symbol
.decl data_segment(Begin:address,End:address)
.input  data_segment
.decl main_function(ea:address)
.input  main_function
.decl function_pointer_section(Name:symbol)
.input  function_pointer_section
.decl no_return_function(Name:symbol)
.input  no_return_function
.decl is_padding(EA:address)
.input  is_padding
.decl refined_block_last_instruction(block:address,EA:address)
.input  refined_block_last_instruction
.decl split_block(block:address)
.input  split_block
.decl block_needs_merging(block:address)
.input  block_needs_merging
.decl next_refined_block_in_section(Block:address, NextBlock:address)
.input  next_refined_block_in_section
.decl block_has_non_nop(Block:address)
.input  block_has_non_nop
.decl nop_block(Block:address)
.input  nop_block
.decl instruction_memory_access_size(EA:address,Op_index:operand_index,Size:unsigned)
.input  instruction_memory_access_size
.decl data_access(EA:address,Op_index:operand_index,RegSegment:register,RegBase:register,RegIndex:register,Mult:number,Offset:number,Size:unsigned)
.input  data_access
.decl value_reg_at_operand(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)
.input  value_reg_at_operand
.decl value_reg_at_operand_loop(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)
.input  value_reg_at_operand_loop
.decl possible_data_limit(EA:address)
.input  possible_data_limit
.decl last_data_limit(EA:address,Where:address)
.input  last_data_limit
.decl last_data_access(EA:address,Where:address)
.input  last_data_access
.decl propagated_data_access(EA:address,Mult:number,EA_ref:address)
.input  propagated_data_access
.decl data_access_pattern_non_zero(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.input  data_access_pattern_non_zero
.decl elf_section_flag(Name:symbol,Position:unsigned)
.input  elf_section_flag
.decl elf_section_type(Name:symbol,Code:unsigned)
.input  elf_section_type
.decl plt_section(name:symbol)
.input  plt_section
.decl plt_entry(ea:address, function:symbol)
.input  plt_entry
.decl plt_data_reference(ea:address)
.input  plt_data_reference
.decl start_function(ea:address)
.input  start_function
.decl tls_segment(Start:address,End:address,Align:unsigned)
.input  tls_segment
.decl relocation_in_operand(EA:address,Index:operand_index,Rel:address,InsnOffset:unsigned)
.input  relocation_in_operand
.decl trivial_relocation(EA:address)
.input  trivial_relocation
.decl zero_relocation(EA:address)
.input  zero_relocation
.decl def_register_is_not_base_address(EA:address,Reg:register)
.input  def_register_is_not_base_address
.decl track_register(Reg32:register,Reg64:register)
.input  track_register
.decl function_non_maintained_reg(reg:register)
.input  function_non_maintained_reg
.decl pc_register(reg:register)
.input  pc_register
.decl unconditional_jump_operation(n:symbol)
.input  unconditional_jump_operation
.decl jump_unequal_operation(n:symbol)
.input  jump_unequal_operation
.decl float_operation(operation:symbol)
.input  float_operation
.decl interrupt_operation(n:symbol)
.input  interrupt_operation
